package com.ig;
	import java.util.ArrayList;
	import java.util.List;
	import java.util.Scanner;

	class Course {
	    private String code;
	    private String title;
	    private String description;
	    private int capacity;
	    private List<String> enrolledStudents;

	    public Course(String code, String title, String description, int capacity) {
	        this.code = code;
	        this.title = title;
	        this.description = description;
	        this.capacity = capacity;
	        this.enrolledStudents = new ArrayList<>();
	    }

	    public String getCode() {
	        return code;
	    }

	    public String getTitle() {
	        return title;
	    }

	    public String getDescription() {
	        return description;
	    }

	    public int getCapacity() {
	        return capacity;
	    }

	    public List<String> getEnrolledStudents() {
	        return enrolledStudents;
	    }

	    public boolean isFull() {
	        return enrolledStudents.size() >= capacity;
	    }

	    public void enrollStudent(String studentId) {
	        enrolledStudents.add(studentId);
	    }

	    public void removeStudent(String studentId) {
	        enrolledStudents.remove(studentId);
	    }

	    @Override
	    public String toString() {
	        return "Course Code: " + code + "\nTitle: " + title + "\nDescription: " + description +
	                "\nCapacity: " + capacity +
	                "\nEnrolled Students: " + enrolledStudents.size() + "/" + capacity;
	    }
	}

	class Student {
	    private String studentId;
	    private String name;
	    private List<String> registeredCourses;

	    public Student(String studentId, String name) {
	        this.studentId = studentId;
	        this.name = name;
	        this.registeredCourses = new ArrayList<>();
	    }

	    public String getStudentId() {
	        return studentId;
	    }

	    public String getName() {
	        return name;
	    }

	    public List<String> getRegisteredCourses() {
	        return registeredCourses;
	    }

	    public void registerCourse(String courseCode) {
	        registeredCourses.add(courseCode);
	    }

	    public void dropCourse(String courseCode) {
	        registeredCourses.remove(courseCode);
	    }

	    @Override
	    public String toString() {
	        return "Student ID: " + studentId + "\nName: " + name +
	                "\nRegistered Courses: " + registeredCourses;
	    }
}

package com.ig;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class CourseRegistrationSystem{
	private List<Course> courses;
    private List<Student> students;

    public CourseRegistrationSystem() {
        courses = new ArrayList<>();
        students = new ArrayList<>();
    }

    public void addCourse(Course course) {
        courses.add(course);
    }

    public void addStudent(Student student) {
        students.add(student);
    }

    public Course findCourseByCode(String code) {
        for (Course course : courses) {
            if (course.getCode().equals(code)) {
                return course;
            }
        }
        return null;
    }

    public Student findStudentById(String studentId) {
        for (Student student : students) {
            if (student.getStudentId().equals(studentId)) {
                return student;
            }
        }
        return null;
    }

    public void displayAvailableCourses() {
        for (Course course : courses) {
            if (!course.isFull()) {
                System.out.println(course);
                System.out.println();
            }
        }
    }

    public static void main(String[] args) {
        CourseRegistrationSystem registrationSystem = new CourseRegistrationSystem();
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("Course Registration System");
            System.out.println("1. Add Course");
            System.out.println("2. Add Student");
            System.out.println("3. Display Available Courses");
            System.out.println("4. Register Student for Course");
            System.out.println("5. Drop Course");
            System.out.println("6. Exit");
            System.out.print("Enter your choice: ");

            int choice = scanner.nextInt();
            scanner.nextLine(); 
            switch (choice) {
                case 1:
                    System.out.print("Enter Course Code: ");
                    String code = scanner.nextLine();
                    System.out.print("Enter Course Title: ");
                    String title = scanner.nextLine();
                    System.out.print("Enter Course Description: ");
                    String description = scanner.nextLine();
                    System.out.print("Enter Course Capacity: ");
                    int capacity = scanner.nextInt();
                    scanner.nextLine(); // Consume the newline character

                    List<String> schedule = new ArrayList<>();
                    System.out.println("Enter Course Schedule (Enter 'done' when finished):");
                    while (true) {
                        String scheduleEntry = scanner.nextLine();
                        if (scheduleEntry.equalsIgnoreCase("done")) {
                            break;
                        }
                        schedule.add(scheduleEntry);
                    }

                    Course course = new Course(code, title, description, capacity);
                    registrationSystem.addCourse(course);
                    break;

                case 2:
                    System.out.print("Enter Student ID: ");
                    String studentId = scanner.nextLine();
                    System.out.print("Enter Student Name: ");
                    String studentName = scanner.nextLine();

                    Student student = new Student(studentId, studentName);
                    registrationSystem.addStudent(student);
                    break;

                case 3:
                    System.out.println("Available Courses:");
                    registrationSystem.displayAvailableCourses();
                    break;

                case 4:
                    System.out.print("Enter Student ID: ");
                    studentId = scanner.nextLine();
                    System.out.print("Enter Course Code to Register: ");
                    code = scanner.nextLine();

                    Student foundStudent = registrationSystem.findStudentById(studentId);
                    Course foundCourse = registrationSystem.findCourseByCode(code);

                    if (foundStudent != null && foundCourse != null && !foundCourse.isFull()) {
                        foundStudent.registerCourse(code);
                        foundCourse.enrollStudent(studentId);
                        System.out.println("Student " + studentId + " registered for course " + code);
                    } else {
                        System.out.println("Registration failed. Please check student ID or course code.");
                    }
                    break;

                case 5:
                    System.out.print("Enter Student ID: ");
                    studentId = scanner.nextLine();
                    System.out.print("Enter Course Code to Drop: ");
                    code = scanner.nextLine();

                    foundStudent = registrationSystem.findStudentById(studentId);
                    foundCourse = registrationSystem.findCourseByCode(code);

                    if (foundStudent != null && foundCourse != null) {
                        foundStudent.dropCourse(code);
                        foundCourse.removeStudent(studentId);
                        System.out.println("Student " + studentId + " dropped course " + code);
                    } else {
                        System.out.println("Course removal failed. Please check student ID or course code.");
                    }
                    break;

                case 6:
                    System.out.println("Exiting...");
                    scanner.close();
                    System.exit(0);
                    break;

                default:
                    System.out.println("Invalid choice. Please enter a valid option.");
            }
        }
    }
}

